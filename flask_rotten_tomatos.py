# -*- coding: utf-8 -*-
"""flask_fake_news_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16-_wfdNbJqLNX3fGYOe8mLQ-lhNqsg2R
"""

import nltk
import re
nltk.download(['punkt','stopwords'])

from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.stem import WordNetLemmatizer

wl = WordNetLemmatizer()
ps = PorterStemmer()

def make_corpus(text):
  corpus=[]
  review = re.sub('[^a-zA-Z]', ' ', text)
  review = review.lower()
  review = review.split()
  review = [ps.stem(words) for words in review if not words in stopwords.words('english')]
  review = ' '.join(review)
  corpus.append(review)
  return corpus

import pickle

pickle_in = open('logistic.pkl','rb')
classifier = pickle.load(pickle_in)
pickle_in.close()

pickle_tf = open('tfidf.pkl','rb')
tfidf = pickle.load(pickle_tf)
pickle_tf.close()

pickle_naive = open('naive_bayes.pkl', 'rb')
classifier_NB = pickle.load(pickle_naive)
pickle_naive.close()

pickle_aggresive = open('passive_agressive_classifier.pkl', 'rb')
classifier_PA = pickle.load(pickle_aggresive)
pickle_aggresive.close()

def corpus_to_tfidf(corpus):
  tfidf_vector = tfidf.transform(corpus)
  return tfidf_vector



from flask import Flask, request,  render_template



app = Flask(__name__)

@app.route("/")
def hello():
  return render_template('index.html')

@app.route("/predict", methods=['POST'])
def predict():
  text = request.form['content']
  algo = request.form['algo']
  corpus = make_corpus(text)
  tfidf_vector = corpus_to_tfidf(corpus)
  float_formatter = "{:.2f}".format
  if algo == 'naive_bayes':
    result_NB = classifier_NB.predict_proba(tfidf_vector)
    print(result_NB)
    result_str = "<h3>Using Naive Bayes : </h3>" + "</br>The probability of the Review being Fresh is : " + str(float_formatter(result_NB[0][0]*100)) + "%</br>The probability of the Review being Rotten is : " + str(float_formatter(result_NB[0][1]*100)) + "%"
    print(result_str)
    return result_str
  elif algo == 'logistic':
    result_LR = classifier.predict_proba(tfidf_vector)
    print(result_LR)
    return "<h3>Using Logistic Regression : </h3>" + "</br>The probability of the Review being Fresh is : " + str(float_formatter(result_LR[0][0]*100)) + "%</br>The probability of the Review being Rotten is : " + str(float_formatter(result_LR[0][1]*100)) + "%"
  elif algo == 'passive_agressive':
    result_PA = classifier_PA.predict(tfidf_vector)
    print(result_PA)
    return "<h3>Using Passive Agressive Classifier : </h3>" + "</br>The probability of the Review being Fresh is : " + str(float_formatter((1-result_PA[0])*100)) + "%</br>The probability of the Review being Rotten is : " + str(float_formatter(result_PA[0]*100)) +"%"
  else:
    result_NB = classifier_NB.predict_proba(tfidf_vector)
    result_LR = classifier.predict_proba(tfidf_vector)
    result_PA = classifier_PA.predict(tfidf_vector)
    result_str = "<h3>Using Naive Bayes : </h3>" + "</br>The probability of the Review being Fresh is : " + str(float_formatter(result_NB[0][0]*100)) + "%</br>The probability of the Review being Rotten is : " + str(float_formatter(result_NB[0][1]*100)) + "%</br><h3>Using Logistic Regression : </h3>" + "</br>The probability of the Review being Fresh is : " + str(float_formatter(result_LR[0][0]*100)) + "%</br>The probability of the Review being Rotten is : " + str(float_formatter(result_LR[0][1]*100)) + "%</br><h3>Using Passive Agressive Classifier</h3>" + "</br>The probability of the Review being Fresh is : " + str(float_formatter((1-result_PA[0])*100)) + "%</br>The probability of the Review being Rotten is : " + str(float_formatter(result_PA[0]*100)) +"%"
    return result_str



if __name__=='__main__':
  app.run()